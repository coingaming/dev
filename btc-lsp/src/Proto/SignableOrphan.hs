{- This file was auto-generated by the signable-haskell-protoc program. -}
{-# OPTIONS_GHC -fno-warn-orphans #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}

module Proto.SignableOrphan (
    ) where
import qualified Universum
import qualified Data.Signable
import qualified GHC.List
import qualified Proto.BtcLsp.Newtype
import qualified Proto.BtcLsp.Newtype_Fields
import qualified Proto.BtcLsp.Type
import qualified Proto.BtcLsp.Type_Fields
import qualified Proto.BtcLsp.Custody.DepositOnChain
import qualified Proto.BtcLsp.Custody.DepositOnChain_Fields
import qualified Proto.BtcLsp.Custody.DepositLn
import qualified Proto.BtcLsp.Custody.DepositLn_Fields
import qualified Proto.BtcLsp
import qualified Proto.BtcLsp_Fields
instance Data.Signable.Signable Proto.BtcLsp.Newtype.Nonce where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.FieldIndex where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.Msat where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.InternalFailure where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.NodePubKey where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.LnInvoice where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Newtype.OnChainAddress where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [(Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Newtype_Fields.val)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Type.FailureKind where
  toBinary
    = Universum.maybe
        (Universum.error "ENUM_OVERFLOW") Data.Signable.toBinary
        Universum..
          ((Data.Signable.safeFromIntegral ::
              Universum.Int -> Universum.Maybe Universum.Int32)
             Universum.. Universum.fromEnum)
instance Data.Signable.Signable Proto.BtcLsp.Type.Ctx where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Type_Fields.maybe'nonce)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Type_Fields.maybe'pubKey)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Type.Failure where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Type_Fields.input)
                (Universum.not Universum.. Universum.null)
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Type_Fields.internal)
                (Universum.not Universum.. Universum.null)
                ((Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Type.InputFailure where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Type_Fields.fieldLocation)
                (Universum.not Universum.. Universum.null)
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              (Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                Universum..
                  (Data.Signable.toBinary
                     Universum.. Universum.view Proto.BtcLsp.Type_Fields.kind)]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositOnChain.Request where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositOnChain_Fields.maybe'ctx)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositOnChain.Response where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositOnChain_Fields.maybe'ctx)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositOnChain_Fields.maybe'success)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositOnChain_Fields.maybe'failure)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (3 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositOnChain.Response'Success where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositOnChain_Fields.maybe'address)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositLn.Request where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Custody.DepositLn_Fields.maybe'ctx)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Custody.DepositLn_Fields.maybe'msat)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositLn.Response where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view Proto.BtcLsp.Custody.DepositLn_Fields.maybe'ctx)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositLn_Fields.maybe'success)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (2 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty,
              Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositLn_Fields.maybe'failure)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (3 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))
instance Data.Signable.Signable Proto.BtcLsp.Custody.DepositLn.Response'Success where
  toBinary
    = Universum.mconcat
        Universum..
          ((Universum.<&>)
             [Data.Signable.applyWithDef
                (Universum.view
                   Proto.BtcLsp.Custody.DepositLn_Fields.maybe'invoice)
                Universum.isJust
                ((Universum.<>) (Data.Signable.toBinary (1 :: Universum.Int32))
                   Universum.. Data.Signable.toBinary)
                Universum.mempty]
             Universum.. (Universum.&))