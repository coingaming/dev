#!/bin/sh

set -e

THIS_DIR="$(dirname "$(realpath "$0")")"
BUILD_DIR="$THIS_DIR/../build"
RTL_PATH="$BUILD_DIR/rtl"
LSP_PATH="$BUILD_DIR/lsp"
LETSENCRYPT_DIR="$BUILD_DIR/letsencrypt"
BITCOIN_NETWORK="testnet"
DOMAIN="coins.io"

confirmAction () {
  QUESTION="$1"
  CONFIRM="$2"
  COMMAND="$3"

  while true; do
    read -p "$QUESTION (Y/n)" ANSWER
    case $ANSWER in
      [Yy]* ) echo "$CONFIRM"; eval "$COMMAND"; break;;
      [Nn]* ) break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

isInstalled () {
  if ! command -v "$1" &> /dev/null; then
    echo "Please install \"$1\" before proceeding"
    exit 1;
  fi
}

getLetsEncryptCert () {
  certbot certonly \
  -d "*.$DOMAIN" \
  --agree-tos \
  --manual \
  --preferred-challenges dns \
  --register-unsafely-without-email \
  --config-dir "$LETSENCRYPT_DIR/etc" \
  --work-dir "$LETSENCRYPT_DIR/lib" \
  --logs-dir "$LETSENCRYPT_DIR/log"
}

copyLetsEncryptCert () {
  COPY_PATH="$1"
  CERT_PATH="$LETSENCRYPT_DIR/etc/live/$DOMAIN"

  echo "Copying files generated by LetsEncrypt to $COPY_PATH"

  cp "$CERT_PATH/cert.pem" "$COPY_PATH/tls.cert"
  cp "$CERT_PATH/privkey.pem" "$COPY_PATH/tls.key"
}

isCertProvided () {
  for FILENAME in tls.cert tls.key; do
    FILEPATH="$1/$FILENAME"

    if [ ! -f "$FILEPATH" ]; then
      echo "File not found at $FILEPATH"
      exit 1;
    fi
  done
}

generateLetsEncryptCert() {
  isInstalled certbot && \
  mkdir -p "$LETSENCRYPT_DIR" && \
  getLetsEncryptCert && \
  copyLetsEncryptCert "$RTL_PATH" && \
  copyLetsEncryptCert "$LSP_PATH"
}

setupTestnetCluster() {
  isInstalled doctl && \
  isConfigured doctl && \
  doctl kubernetes cluster create "lsp-$BITCOIN_NETWORK" \
    --count 3 \
    --region 
}

confirmAction \
"==> Clean up previous build?" \
"Deleting files located in $BUILD_DIR" \
"rm -rf $BUILD_DIR && mkdir -p $RTL_PATH && mkdir -p $LSP_PATH"

confirmAction \
"==> Obtain LetsEncrypt certificates?" \
"Generating free certificate for $DOMAIN..." \
"generateLetsEncryptCert"

echo "==> Checking that tls certs for \"rtl\" and \"lsp\" are provided"
isCertProvided "$RTL_PATH"
isCertProvided "$LSP_PATH"
echo "Certs are OK."

confirmAction \
"==> Setup $BITCOIN_NETWORK kubernetes cluster?" \
"Spinning new kubernetes cluster..." \
"setupTestnetCluster"

exit

echo "==> Partial dhall"
sh "$THIS_DIR/hm-shell-docker.sh" --mini \
   "--run './nix/k8s-dhall-compile.sh $BITCOIN_NETWORK'"

# REPLACE coins.io WITH ACTUAL DOMAIN

echo "==> Configuring environment for containers"
sh "$THIS_DIR/k8s-setup-env.sh"

echo "==> Deploying k8s resources"
sh "$THIS_DIR/k8s-deploy.sh"

echo "==> Waiting until containers are ready"
sh "$THIS_DIR/k8s-wait.sh"

echo "==> Partial spin"
sh "$THIS_DIR/k8s-lazy-init-unlock.sh"
sleep 20

echo "==> Generate additional creds"
sh "$THIS_DIR/k8s-gen-creds.sh"

echo "==> Full dhall"
sh "$THIS_DIR/hm-shell-docker.sh" --mini \
   "--run './nix/ns-inline-creds.sh && ./nix/k8s-dhall-compile.sh $BITCOIN_NETWORK'"

echo "==> Updating environment for containers"
kubectl delete secret rtl lsp
sh "$THIS_DIR/k8s-setup-env.sh"

echo "==> Restarting k8s deployments"
sh "$THIS_DIR/k8s-restart.sh" rtl
sh "$THIS_DIR/k8s-restart.sh" lsp

echo "==> Waiting until containers are ready"
sh "$THIS_DIR/k8s-wait.sh"

echo "==> Mine initial coins"
sh "$THIS_DIR/k8s-mine.sh" 105
