syntax="proto3";

//
// HighLevel types are the only types
// used directly in Grpc Methods.
//

package BtcLsp.Data.HighLevel;

import "btc_lsp/data/low_level.proto";

message FeeRate {
  .BtcLsp.Data.LowLevel.Urational val = 1;
}

message FeeMoney {
  .BtcLsp.Data.LowLevel.Msat val = 1;
}

message FundMoney {
  .BtcLsp.Data.LowLevel.Msat val = 1;
}

message RefundMoney {
  .BtcLsp.Data.LowLevel.Msat val = 1;
}

message LocalBalance {
  .BtcLsp.Data.LowLevel.Msat val = 1;
}

message RemoteBalance {
  .BtcLsp.Data.LowLevel.Msat val = 1;
}

message FundLnInvoice {
  .BtcLsp.Data.LowLevel.LnInvoice val = 1;
}

message FundLnHodlInvoice {
  .BtcLsp.Data.LowLevel.LnHodlInvoice val = 1;
}

message FundOnChainAddress {
  .BtcLsp.Data.LowLevel.OnChainAddress val = 1;
}

message RefundOnChainAddress {
  .BtcLsp.Data.LowLevel.OnChainAddress val = 1;
}

message Ctx {
  Nonce nonce = 1;
  LnPubKey ln_pub_key = 2;
}

//
// All requests do require a nonce. The nonce is used
// for security reasons and is used to guard against
// replay attacks. The server will reject any request
// that comes with an incorrect nonce. The only requirement
// for the nonce is that it needs to be strictly increasing.
// Nonce generation is often achieved by using the
// current UNIX timestamp.
//

message Nonce {
  uint64 val = 1;
}

message LnPubKey {
  bytes val = 1;
}

message LnHost {
  string val = 1;
}

message LnPort {
  uint32 val = 1;
}

message LnPeer {
  LnPubKey pub_key = 1;
  LnHost host = 2;
  LnPort port = 3;
}

message InputFailure {
  repeated FieldIndex field_location = 1;
  InputFailureKind kind = 2;
}

message FieldIndex {
  uint32 val = 1;
}

enum InputFailureKind {
  // All proto3 messages are optional, but sometimes
  // message presence is required by source code.
  REQUIRED = 0;
  // Sometimes protobuf term is not data itself, but reference
  // to some other data, located somewhere else, for example
  // in database, and this resource might be not found.
  NOT_FOUND = 1;
  // Sometimes data is required to be in some
  // specific format (for example DER binary encoding)
  // which is not the part of proto3 type system.
  // This error shows the failure of custom parser.
  PARSING_FAILED = 2;
  // Even if custom parser succeeded, sometimes data
  // needs to be verified somehow, for example
  // signature needs to be cryptographically verified.
  VERIFICATION_FAILED = 3;
}

enum Privacy {
  PUBLIC = 0;
  PRIVATE = 1;
}
