syntax="proto3";

package BtcLsp.Method.SwapIntoLn;

import "btc_lsp/data/high_level.proto";

message Request {
  .BtcLsp.Data.HighLevel.Ctx ctx = 1;
  // SwapIntoLn invoice always should be zero amount
  // to decouple invoice from amount received by
  // FundOnChainAddress. Also expiration limit should be
  // as high as possible.
  .BtcLsp.Data.HighLevel.FundLnInvoice fund_ln_invoice = 2;
  .BtcLsp.Data.HighLevel.RefundOnChainAddress refund_on_chain_address = 3;
}

message Response {
  .BtcLsp.Data.HighLevel.Ctx ctx = 1;

  oneof either {
    Success success = 2;
    Failure failure = 3;
  }

  message Success {
    .BtcLsp.Data.HighLevel.FundOnChainAddress fund_on_chain_address = 1;
    // Minimal expected swap amount. Swap will not happen
    // until address balance is more or equal than FundMoney.
    .BtcLsp.Data.HighLevel.FundMoney min_fund_money = 2;
  }

  message Failure {
    repeated .BtcLsp.Data.HighLevel.InputFailure generic = 1;
    repeated InputFailure specific = 2;
    repeated InternalFailure internal = 3;

    enum InputFailure {
      NON_ZERO_AMT_FUND_LN_INVOICE = 0;
      TOO_LOW_EXPIRY_FUND_LN_INVOICE = 1;
      SIGNATURE_NOT_GENUINE_FUND_LN_INVOICE = 2;
    }

    message InternalFailure {

    }
  }
}
