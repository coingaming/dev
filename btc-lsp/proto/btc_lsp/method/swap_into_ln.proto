syntax="proto3";

package BtcLsp.Method.SwapIntoLn;

import "btc_lsp/data/high_level.proto";

message Request {
  .BtcLsp.Data.HighLevel.Ctx ctx = 1;
  //
  // NOTE : Removed as redundant data after adopting
  // psbt-based channel opening procedure. Before there wasn't
  // much control over UTXOs, so it was not possible to safely
  // use push_sat, so fund_ln_invoice was a workaround used to
  // push liquidity. With precise UTXO control this is not
  // the issue anymore, bitcoin network solves double spend
  // problem.
  //
  // .BtcLsp.Data.HighLevel.FundLnInvoice fund_ln_invoice = 2;
  .BtcLsp.Data.HighLevel.RefundOnChainAddress refund_on_chain_address = 3;
  .BtcLsp.Data.HighLevel.Privacy privacy = 4;
}

message Response {
  .BtcLsp.Data.HighLevel.Ctx ctx = 1;

  oneof either {
    Success success = 2;
    Failure failure = 3;
  }

  message Success {
    .BtcLsp.Data.HighLevel.FundOnChainAddress fund_on_chain_address = 1;
    // Minimal expected swap amount. Swap will not happen
    // until address balance is more or equal than FundMoney.
    .BtcLsp.Data.HighLevel.FundMoney min_fund_money = 2;
  }

  message Failure {
    repeated .BtcLsp.Data.HighLevel.InputFailure generic = 1;
    repeated InputFailure specific = 2;
    repeated .BtcLsp.Data.HighLevel.InternalFailure internal = 3;

    enum InputFailure {
      DEFAULT = 0;
      //
      // NOTE : Removed together with fund_ln_invoice
      // field from request as errors associated with
      // this field.
      //
      // FUND_LN_INVOICE_HAS_NON_ZERO_AMT = 0;
      // FUND_LN_INVOICE_EXPIRES_TOO_SOON = 1;
      // FUND_LN_INVOICE_SIGNATURE_IS_NOT_GENUINE = 2;
      REFUND_ON_CHAIN_ADDRESS_IS_NOT_VALID = 3;
      REFUND_ON_CHAIN_ADDRESS_IS_NOT_SEGWIT = 4;
    }
  }
}
