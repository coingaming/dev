name: release
on: [push]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v15
      with:
        nix_path: nixpkgs=channel:nixos-21.11
        extra_nix_config: |
          system-features = kvm
          http2 = false
          require-sigs = false
          sandbox = false
          cores = 2
          max-jobs = 4
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          substituters = https://cache.nixos.org file:///tmp/nix_ci_cache https://hydra.iohk.io
          trusted-substituters = file:///tmp/nix_ci_cache
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
    - uses: actions/cache@v2
      with:
        path: /tmp/nix_ci_cache
        key: cache-${{ runner.os }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-${{ runner.os }}-${{ matrix.configuration }}-
    - name: Release all
      run: ./nix/ci-release.sh
    - name: Create github release
      if: github.ref_type == 'tag'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
    - name: Docker login
      if: github.ref_type == 'tag'
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker push
      if: github.ref_type == 'tag'
      run: ./nix/ci-push.sh
    - name: Upload btc-lsp docker image
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-btc-lsp.tar.gz
        asset_name: docker-image-btc-lsp.tar.gz
        asset_content_type: application/gzip
    - name: Upload btc-lsp docker image version
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-btc-lsp.txt
        asset_name: docker-image-btc-lsp.txt
        asset_content_type: text/plain
    - name: Upload electrs docker image
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-electrs.tar.gz
        asset_name: docker-image-electrs.tar.gz
        asset_content_type: application/gzip
    - name: Upload electrs docker image version
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-electrs.txt
        asset_name: docker-image-electrs.txt
        asset_content_type: text/plain
    - name: Upload integration docker image
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-integration.tar.gz
        asset_name: docker-image-integration.tar.gz
        asset_content_type: application/gzip
    - name: Upload integration docker image version
      if: github.ref_type == 'tag'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./btc-lsp/build/docker-image-integration.txt
        asset_name: docker-image-integration.txt
        asset_content_type: text/plain
    - name: Save cache
      run: |
        whoami
        ls -la /tmp/nix_ci_cache
        mkdir -p /tmp/nix_ci_cache
        sudo chown -R $USER:$USER /tmp/nix_ci_cache
        nix copy --no-check-sigs --to file:///tmp/nix_ci_cache --all
        du -sh /tmp/nix_ci_cache
